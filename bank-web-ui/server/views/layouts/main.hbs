{{!--
    This is the default layout applied to any page sent from the server via res.render()

    For more information see http://handlebarsjs.com/
--}}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="img/piggy-{{bankTheme}}.ico" type="image/x-icon"/>
    <title>{{bankName}}</title>

    <link rel="stylesheet" href="{{webpackBaseUrl}}/builds/{{lookup bundles 'bundle.css'}}">
    {{! HTML5 shim, Respond.js, and incompatibility warning for IE8 support of HTML5 elements and media queries }}
    {{! WARNING: Respond.js doesn't work if you view the page via file:// }}
    <!--[if lte IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <script type="text/javascript">
        alert('Your browser is out of date, and may not be compatible with our website. Please download Google Chrome, Mozilla Firefox, or Internet Explorer version 10 or later.')
    </script>
    <![endif]-->
</head>

<body data-bind="css: { 'has-subnav': pageHasSubNav }" class="fixed-footer">

    <div class="fixed-footer-wrapper">
        {{! The content of the page is inserted here }}
        {{{body}}}
    </div>

    <script src="{{webpackBaseUrl}}/builds/{{lookup bundles 'vendor.js'}}"></script>
    <script src="{{webpackBaseUrl}}/builds/{{lookup bundles 'bundle.js'}}"></script>

    {{!--
        We can embed data as inline scripts by including an array of { name: 'something', content: [a JSON object] }
        objects in the page model, as the 'contextProperties' property.
        These can then be accessed by the main application code through the global app.context property:
            //In server side, we push {name: 'csrfToken', content: 'theActualToken' } into the "contextProperties" property of the template data
            //Then in client side code you can:
            var csrfToken = app.context.csrfToken;
    --}}
    {{> client-context contextProperties}}

</body>

</html>
